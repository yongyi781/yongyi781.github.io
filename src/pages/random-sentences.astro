<!doctype html>
<html>
  <head>
    <title>Random Sentences</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <!-- CSS only -->
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3"
      crossorigin="anonymous"
    />
    <style>
      #sentence {
        font-size: 18px;
        text-align: center;
      }
    </style>
  </head>

  <body>
    <div class="container">
      <h1>Random Sentences (words weighted by frequency)</h1>
      <div class="row g-3">
        <div class="col-2">
          <label for="pattern" class="col-form-label">Pattern:</label>
        </div>
        <div class="col-auto">
          <input type="text" id="pattern" class="form-control" value="a j n vp a n and vp a n" />
        </div>
        <div class="col-auto">
          <button id="generate" class="btn btn-primary col-auto" disabled>Loading words...</button>
        </div>
        <div class="col-auto">
          <div class="col-auto">
            <button id="speak" class="btn btn-primary" disabled>Speak</button>
          </div>
        </div>
      </div>
      <div class="row g-3" id="speakDiv" hidden>
        <div class="col-2">
          <label for="pattern" class="col-form-label">Voice:</label>
        </div>
        <div class="col-auto">
          <select class="form-select" id="voices"></select>
        </div>
      </div>
      <div id="sentence"></div>
      <hr />
      <div>
        <h3>Pattern Help</h3>
        <ul id="help"></ul>
      </div>
    </div>
    <script
      src="https://code.jquery.com/jquery-3.4.1.min.js"
      integrity="sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo="
      crossorigin="anonymous"></script>
    <script is:inline>
      let words = {}
      let voices

      function readCsv(allText) {
        let allTextLines = allText.split(/\r\n|\n/)
        let headers = allTextLines[0].split(",")
        let lines = []

        for (let i = 1; i < allTextLines.length; i++) {
          let data = allTextLines[i].split(",")
          if (data.length == headers.length) {
            let tarr = {}
            for (let j = 0; j < headers.length; j++) {
              tarr[headers[j]] = isNaN(data[j]) ? data[j] : +data[j]
            }
            lines.push(tarr)
          }
        }

        return lines
      }

      function chooseRandom(arr) {
        let total = arr.reduce(function (prev, curr) {
          return prev + curr.Frequency
        }, 0)
        let num = Math.floor(Math.random() * total)
        for (let i = 0; i < arr.length; i++) {
          num -= arr[i].Frequency
          if (num <= 0) {
            return arr[i]
          }
        }
        return arr[0]
      }

      // grammatically predictable rules
      // From https://gist.github.com/letsgetrandy/1e05a68ea74ba6736eb5
      function getPastTense(verb) {
        let exceptions = {
          are: "were",
          be: "was",
          bring: "brought",
          come: "came",
          do: "did",
          eat: "ate",
          get: "got",
          go: "went",
          have: "had",
          inherit: "inherited",
          is: "was",
          mean: "meant",
          run: "ran",
          say: "said",
          see: "saw",
          sit: "sat",
          speak: "spoke",
          sing: "sang",
          take: "took",
          visit: "visited",
          think: "thought",
          begin: "began",
          catch: "caught",
          meet: "met",
          give: "gave",
          make: "made",
          feel: "felt",
          keep: "kept",
          let: "let",
          hold: "held",
          tell: "told",
          win: "won",
          know: "knew",
          grow: "grew",
          cut: "cut",
          bet: "bet",
          open: "opened"
        }

        if (exceptions[verb]) {
          return exceptions[verb]
        }
        if (/e$/i.test(verb)) {
          return verb + "d"
        }
        if (/[aeiou]c$/i.test(verb)) {
          return verb + "ked"
        }
        // for american english only
        if (/el$/i.test(verb)) {
          return verb + "ed"
        }
        if (/[aeio][aeiou][dlmnprst]$/.test(verb)) {
          return verb + "ed"
        }
        if (/[aeiou][bdglmnprst]$/i.test(verb)) {
          return verb.replace(/(.+[aeiou])([bdglmnprst])/, "$1$2$2ed")
        }
        return verb + "ed"
      }

      function populateHelp() {
        $("#help").empty()
        for (let p in words) {
          let text = "<strong>" + p + "</strong>" + " (" + words[p].length + "): "
          let examples = words[p]
            .slice(0, 5)
            .map(function (w) {
              return w.Word
            })
            .join(", ")
          $("#help").append($("<li/>").html(text + examples))
        }
        $("#help").append("<li><strong>vp</strong>: Past tense verbs</li>")
      }

      $("#generate").click(() => {
        let ss = $("#pattern").val().split(" ")
        let choices = ss.map(function (p) {
          if (p === "vp" && "v" in words) {
            return getPastTense(chooseRandom(words[p[0]]).Word)
          }
          if (!(p in words)) {
            return p
          }
          return chooseRandom(words[p]).Word
        })
        for (let i = 0; i < choices.length - 1; i++) {
          if (choices[i] === "a" && "aeiouAEIOU".indexOf(choices[i + 1][0]) !== -1) {
            choices[i] = "an"
          }
        }
        let sentence = choices.join(" ") + "."
        sentence = sentence[0].toUpperCase() + sentence.substring(1)
        $("#sentence").text(sentence)
        $("#speak").removeAttr("disabled")
        $("#speakDiv").removeAttr("hidden")
      })

      $("#pattern").keypress(e => {
        if (e.key === "Enter") {
          e.preventDefault()
          $("#generate").click()
        }
      })

      $("#speak").click(() => {
        let u = new SpeechSynthesisUtterance($("#sentence").text())
        u.voice = voices[$("#voices").val()]
        u.volume = 0.2
        speechSynthesis.cancel()
        speechSynthesis.speak(u)
      })

      speechSynthesis.addEventListener("voiceschanged", () => {
        if ($("#voices").children().length == 0) {
          voices = speechSynthesis.getVoices()
          voices.forEach((voice, i) => {
            if (true) {
              $("#voices").append($("<option>").text(voice.name).val(i))
            }
          })
          $("#voices").val(voices.findIndex(v => v.lang === "en-US" && v.name.includes("Guy")))
        }
      })

      $.get("/data/words.csv", function (data) {
        readCsv(data).forEach(function (item) {
          let pos = item["Part of speech"]
          if (words[pos] == null) {
            words[pos] = []
          }
          words[pos].push(item)
        })

        $("#generate").attr("disabled", false).text("Generate")
        populateHelp()
      })
    </script>
  </body>
</html>
